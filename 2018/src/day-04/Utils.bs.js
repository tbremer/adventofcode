// Generated by BUCKLESCRIPT VERSION 4.0.8, PLEASE EDIT WITH CARE
'use strict';

var $$String = require("bs-platform/lib/js/string.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

function to_opt(prim) {
  if (prim == null) {
    return undefined;
  } else {
    return Caml_option.some(prim);
  }
}

var Parse_error = Caml_exceptions.create("Utils-Adventofcode2018.Parse_error");

var main_parser = new RegExp("\\[([\\d-].+?)\\](.+$)");

var guard_parser = new RegExp("Guard #(\\d.+?) (.+$)");

function parse_timestamp(str) {
  if (str !== undefined) {
    var timestamp = $$String.trim(str);
    return new Date(timestamp).getTime();
  } else {
    return 0.0;
  }
}

function parse_action(str) {
  if (str !== undefined) {
    var pa = str;
    if (guard_parser.test(pa)) {
      var match = guard_parser.exec(pa);
      if (match !== null) {
        return /* StartShift */0;
      } else {
        throw [
              Parse_error,
              "Can't parse guard!"
            ];
      }
    } else {
      var match$1 = $$String.trim(pa);
      switch (match$1) {
        case "falls asleep" : 
            return /* FallAsleep */1;
        case "wakes up" : 
            return /* WakeUp */2;
        default:
          throw [
                Parse_error,
                "Could not get action"
              ];
      }
    }
  } else {
    throw [
          Parse_error,
          "Ah no!"
        ];
  }
}

function parse_guard_id(str) {
  if (str !== undefined) {
    var pa = str;
    if (guard_parser.test(pa)) {
      var match = guard_parser.exec(pa);
      if (match !== null) {
        var match$1 = Caml_array.caml_array_get(match, 1);
        if (match$1 == null) {
          throw [
                Parse_error,
                "No results from guard"
              ];
        } else {
          return Caml_format.caml_int_of_string(match$1);
        }
      } else {
        throw [
              Parse_error,
              "Can't parse guard!"
            ];
      }
    } else {
      return undefined;
    }
  } else {
    throw [
          Parse_error,
          "Ah no!"
        ];
  }
}

exports.to_opt = to_opt;
exports.Parse_error = Parse_error;
exports.main_parser = main_parser;
exports.guard_parser = guard_parser;
exports.parse_timestamp = parse_timestamp;
exports.parse_action = parse_action;
exports.parse_guard_id = parse_guard_id;
/* main_parser Not a pure module */
