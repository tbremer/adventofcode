// Generated by BUCKLESCRIPT VERSION 4.0.8, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var $$String = require("bs-platform/lib/js/string.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Input2$Adventofcode2018 = require("./Input2.bs.js");

function split_new_lines(param) {
  return param.split("\n");
}

function is_int(desired_num, num) {
  return desired_num === num;
}

function is_two(param) {
  return 2 === param;
}

function is_three(param) {
  return 3 === param;
}

function if_two_add(acc, test) {
  var match = is_two(test);
  if (match) {
    return acc + 1 | 0;
  } else {
    return acc;
  }
}

function if_three_add(acc, test) {
  var match = is_three(test);
  if (match) {
    return acc + 1 | 0;
  } else {
    return acc;
  }
}

function string_to_letter_map(input_string) {
  var hash = { };
  var set = function (param, param$1) {
    hash[param] = param$1;
    return /* () */0;
  };
  for(var idx = 0 ,idx_finish = input_string.length - 1 | 0; idx <= idx_finish; ++idx){
    var ch_str = $$String.make(1, Caml_string.get(input_string, idx));
    var match = Js_dict.get(hash, ch_str);
    if (match !== undefined) {
      set(ch_str, match + 1 | 0);
    } else {
      set(ch_str, 1);
    }
  }
  return hash;
}

var a = $$Array.map(Js_dict.entries, $$Array.map(string_to_letter_map, split_new_lines(Input2$Adventofcode2018.input)));

var num_of_twos = $$Array.fold_left((function (acc, cur) {
        var twos = $$Array.fold_left((function (acc, param) {
                return if_two_add(acc, param[1]);
              }), 0, cur);
        var match = twos > 0;
        if (match) {
          return acc + 1 | 0;
        } else {
          return acc;
        }
      }), 0, a);

var num_of_threes = $$Array.fold_left((function (acc, cur) {
        var threes = $$Array.fold_left((function (acc, param) {
                return if_three_add(acc, param[1]);
              }), 0, cur);
        var match = threes > 0;
        if (match) {
          return acc + 1 | 0;
        } else {
          return acc;
        }
      }), 0, a);

console.log("Test 1: " + String(Caml_int32.imul(num_of_twos, num_of_threes)));

var input = split_new_lines(Input2$Adventofcode2018.input);

function eqq(a, b) {
  return a === b;
}

function close_enough(a, b) {
  var matches = 0;
  var usable_len = a.length - 1 | 0;
  for(var c = 0; c <= usable_len; ++c){
    var a$1 = Caml_string.get(a, c);
    var b$1 = Caml_string.get(b, c);
    if (a$1 !== b$1) {
      matches = matches + 1 | 0;
    }
    
  }
  return matches === 1;
}

function find_matching(haystack, _idx) {
  while(true) {
    var idx = _idx;
    var needle = Caml_array.caml_array_get(haystack, idx);
    var exit = 0;
    var item;
    try {
      item = List.find((function(needle){
          return function (i) {
            return close_enough(needle, i);
          }
          }(needle)), $$Array.to_list(haystack));
      exit = 1;
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        _idx = idx + 1 | 0;
        continue ;
      } else {
        throw exn;
      }
    }
    if (exit === 1) {
      return /* tuple */[
              needle,
              item
            ];
    }
    
  };
}

function drop_mismatch(param) {
  var b = param[1];
  var a = param[0];
  var str = "";
  var len = a.length - 1 | 0;
  for(var c = 0; c <= len; ++c){
    var aa = Caml_string.get(a, c);
    var bb = Caml_string.get(b, c);
    if (aa === bb) {
      str = str + $$String.make(1, aa);
    }
    
  }
  return str;
}

var match_ = drop_mismatch(find_matching(input, 0));

console.log("Test 2: " + match_);

exports.split_new_lines = split_new_lines;
exports.is_int = is_int;
exports.is_two = is_two;
exports.is_three = is_three;
exports.if_two_add = if_two_add;
exports.if_three_add = if_three_add;
exports.string_to_letter_map = string_to_letter_map;
exports.a = a;
exports.num_of_twos = num_of_twos;
exports.num_of_threes = num_of_threes;
exports.input = input;
exports.eqq = eqq;
exports.close_enough = close_enough;
exports.find_matching = find_matching;
exports.drop_mismatch = drop_mismatch;
exports.match_ = match_;
/* a Not a pure module */
