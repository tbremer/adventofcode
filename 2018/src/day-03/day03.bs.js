// Generated by BUCKLESCRIPT VERSION 4.0.8, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Day3Data$Adventofcode2018 = require("./Day3Data.bs.js");

function split_by_space(param) {
  return param.split(" ");
}

function split_by_new_line(param) {
  return param.split("\n");
}

function split_at_comma(param) {
  return param.split(",");
}

function split_at_x(param) {
  return param.split("x");
}

function map_to_int(param) {
  return $$Array.map(Caml_format.caml_int_of_string, param);
}

function remove_last_char(str) {
  return $$String.sub(str, 0, str.length - 1 | 0);
}

function remove_first_char(str) {
  return $$String.sub(str, 1, str.length - 1 | 0);
}

function remove_first_char_parse_number(value) {
  return Caml_format.caml_int_of_string(remove_first_char(value));
}

function to_tuple(data) {
  var value = Caml_array.caml_array_get(data, 0);
  var elf_id = Caml_format.caml_int_of_string(remove_first_char(value));
  var coords = map_to_int(split_at_comma(remove_last_char(Caml_array.caml_array_get(data, 2))));
  var dimensions = map_to_int(split_at_x(Caml_array.caml_array_get(data, 3)));
  return /* tuple */[
          elf_id,
          coords,
          dimensions
        ];
}

var base_array = $$Array.map(to_tuple, $$Array.map(split_by_space, split_by_new_line(Day3Data$Adventofcode2018.input)));

var matrix = $$Array.make_matrix(1000, 1000, /* tuple */[
      0,
      /* array */[]
    ]);

var intersecting_ids = /* record */[/* contents */new Set()];

var all_ids = /* record */[/* contents */new Set()];

function place_on_matrix(param) {
  var dimensions = param[2];
  var coords = param[1];
  var id = param[0];
  var x = Caml_array.caml_array_get(coords, 0);
  var y = Caml_array.caml_array_get(coords, 1);
  var w = Caml_array.caml_array_get(dimensions, 0) - 1 | 0;
  var h = Caml_array.caml_array_get(dimensions, 1) - 1 | 0;
  all_ids[0] = all_ids[0].add(id);
  return $$Array.iteri((function (x_idx, row) {
                if (x_idx >= x && x_idx <= (x + w | 0)) {
                  return $$Array.iteri((function (y_idx, _col) {
                                if (y_idx >= y && y_idx <= (y + h | 0)) {
                                  var match = Caml_array.caml_array_get(Caml_array.caml_array_get(matrix, x_idx), y_idx);
                                  var a = $$Array.append(match[1], /* array */[id]);
                                  var c = match[0] + 1 | 0;
                                  if (c > 1) {
                                    $$Array.iter((function (i) {
                                            if (intersecting_ids[0].has(i)) {
                                              return 0;
                                            } else {
                                              var b = intersecting_ids[0].add(i);
                                              intersecting_ids[0] = b;
                                              return /* () */0;
                                            }
                                          }), a);
                                    intersecting_ids[0] = intersecting_ids[0].add(id);
                                  }
                                  return Caml_array.caml_array_set(Caml_array.caml_array_get(matrix, x_idx), y_idx, /* tuple */[
                                              c,
                                              a
                                            ]);
                                } else {
                                  return 0;
                                }
                              }), row);
                } else {
                  return 0;
                }
              }), matrix);
}

$$Array.iter(place_on_matrix, base_array);

var total = $$Array.fold_left((function (acc, row) {
        return acc + $$Array.fold_left((function (acc, param) {
                      var match = param[0] > 1;
                      if (match) {
                        return acc + 1 | 0;
                      } else {
                        return acc;
                      }
                    }), 0, row) | 0;
      }), 0, matrix);

console.log("Puzzle 1: " + String(total));

var Type_error = Caml_exceptions.create("Day03-Adventofcode2018.Type_error");

var non_intersecting = $$Array.fold_left((function (all, cur) {
        if (intersecting_ids[0].has(cur)) {
          return all;
        } else if (all !== -1) {
          throw [
                Type_error,
                "All has an id already (" + (String(all) + ("), but we tried: " + String(cur)))
              ];
        } else {
          return cur;
        }
      }), -1, Array.from(all_ids[0]));

console.log("Puzzle 2: " + String(non_intersecting));

exports.split_by_space = split_by_space;
exports.split_by_new_line = split_by_new_line;
exports.split_at_comma = split_at_comma;
exports.split_at_x = split_at_x;
exports.map_to_int = map_to_int;
exports.remove_last_char = remove_last_char;
exports.remove_first_char = remove_first_char;
exports.remove_first_char_parse_number = remove_first_char_parse_number;
exports.to_tuple = to_tuple;
exports.base_array = base_array;
exports.matrix = matrix;
exports.intersecting_ids = intersecting_ids;
exports.all_ids = all_ids;
exports.place_on_matrix = place_on_matrix;
exports.total = total;
exports.Type_error = Type_error;
exports.non_intersecting = non_intersecting;
/* base_array Not a pure module */
